
    public void bad() throws Throwable {
        if (IO.staticReturnsTrueOrFalse()) {
            FileOutputStream streamFileOutput = null;
            try {
                String path = "C:\\test_bad.txt";
                File file = new File(path);
                long lastModified = file.lastModified();
                streamFileOutput = new FileOutputStream(file);
                streamFileOutput.write("This is a new line".getBytes("UTF-8"));
                
                
                file.setLastModified(lastModified - 10000L);
            }
            catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "File I/O error", exceptIO);
            }
            finally {
                try {
                    if (streamFileOutput != null) {
                        streamFileOutput.close();
                    }
                }
                catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileOutputStream", exceptIO);
                }
            }
        }
        else {

            FileOutputStream streamFileOutput = null;

            try {
                String path = "C:\\test_good.txt";
                File file = new File(path);
                streamFileOutput = new FileOutputStream(file);
                streamFileOutput.write("This is a new line".getBytes("UTF-8"));
                
            }
            catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "File I/O error", exceptIO);
            }
            finally {
                try {
                    if (streamFileOutput != null) {
                        streamFileOutput.close();
                    }
                }
                catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileOutputStream", exceptIO);
                }
            }

        }
    }