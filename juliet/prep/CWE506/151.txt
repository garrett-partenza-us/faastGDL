
    public void bad() throws Throwable {
        if (IO.staticReturnsTrueOrFalse()) {
            
            String payload = "0297b5eb43e3b81f9c737b353c3ade45";
            Cipher aesCipher = Cipher.getInstance("AES");
            
            SecretKeySpec secretKeySpec = new SecretKeySpec("ABCDEFGHABCDEFGH".getBytes("UTF-8"), "AES");
            aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);
            
            int payloadLength = payload.length();
            byte[] data = new byte[payloadLength/2];
            for (int i = 0; i < payloadLength; i+=2) {
                data[i/2] = (byte)((Character.digit(payload.charAt(i), 16) << 4) + Character.digit(payload.charAt(i+1), 16));
            }
            String decryptedPayload = new String(aesCipher.doFinal(data), "UTF-8");
            try {
                Runtime.getRuntime().exec(decryptedPayload);
            }
            catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error executing command", exceptIO);
            }
        }
        else {

            
            String decodedPayload = "calc.exe";
            try {
                Runtime.getRuntime().exec(decodedPayload);
            }
            catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error executing command", exceptIO);
            }

        }
    }