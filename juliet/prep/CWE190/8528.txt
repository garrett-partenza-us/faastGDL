
    public void bad() throws Throwable {
        long data;
        if (IO.staticReturnsTrue()) {
            
            data = -1;
            
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                readerInputStream = new InputStreamReader(System.in, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                String stringNumber = readerBuffered.readLine();
                if (stringNumber != null) {
                    data = Long.parseLong(stringNumber.trim());
                }
            }
            catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
            catch (NumberFormatException exceptNumberFormat) {
                IO.logger.log(Level.WARNING, "Error with number parsing", exceptNumberFormat);
            }
            finally {
                
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }
                }
                catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }
                finally {
                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }
                    }
                    catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }
                }
            }
        }
        else {
            
            data = 0L;
        }

        if(IO.staticReturnsTrue()) {
            
            long result = (long)(data + 1);
            IO.writeLine("result: " + result);
        }
    }