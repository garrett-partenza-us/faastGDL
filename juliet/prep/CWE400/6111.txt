
    public void bad() throws Throwable {
        int count;
        if (IO.staticFive==5) {
            count = Integer.MIN_VALUE; {
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                
                try {
                    readerInputStream = new InputStreamReader(System.in, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    
                    String stringNumber = readerBuffered.readLine();
                    if (stringNumber != null) {
                        try {
                            count = Integer.parseInt(stringNumber.trim());
                        }
                        catch(NumberFormatException exceptNumberFormat) {
                            IO.logger.log(Level.WARNING, "Number format exception parsing count from string", exceptNumberFormat);
                        }
                    }
                }
                catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
                finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }
                    }
                    catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }
                    }
                    catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }
                }
            }
            
        }
        else {
            
            count = 0;
        }

        if (IO.staticFive==5) {
            File file = new File("badSink.txt");
            FileOutputStream streamFileOutput = new FileOutputStream(file);
            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, "UTF-8");
            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);
            int i;
            
            for (i = 0; i < count; i++) {
                try {
                    writerBuffered.write("Hello");
                }
                catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream writing", exceptIO);
                }
            }
            
            try {
                if (writerBuffered != null) {
                    writerBuffered.close();
                }
            }
            catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing BufferedWriter", exceptIO);
            }
            try {
                if (writerOutputStream != null) {
                    writerOutputStream.close();
                }
            }
            catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing OutputStreamWriter", exceptIO);
            }
            try {
                if (streamFileOutput != null) {
                    streamFileOutput.close();
                }
            }
            catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing FileOutputStream", exceptIO);
            }
        }
    }