
    public void bad() throws Throwable {
        int count;

        switch (6) {
        case 6:
            count = Integer.MIN_VALUE; 
 {
                Properties properties = new Properties();
                FileInputStream streamFileInput = null;
                try {
                    streamFileInput = new FileInputStream("../common/config.properties");
                    properties.load(streamFileInput);
                    
                    String stringNumber = properties.getProperty("data");
                    if (stringNumber != null) {
                        try {
                            count = Integer.parseInt(stringNumber.trim());
                        }
                        catch(NumberFormatException exceptNumberFormat) {
                            IO.logger.log(Level.WARNING, "Number format exception parsing count from string", exceptNumberFormat);
                        }
                    }
                }
                catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
                finally {
                    
                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }
                    }
                    catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }
                }
            }
            break;
        default:
            
            count = 0;
            break;
        }

        switch (7) {
        case 7:
            int i = 0;
            
            for (i = 0; i < count; i++) {
                IO.writeLine("Hello");
            }
            break;
        default:
            
            IO.writeLine("Benign, fixed string");
            break;
        }
    }