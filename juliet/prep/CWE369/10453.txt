
    private void goodB2G1() throws Throwable {
        float data;

        if (privateTrue) {
            data = -1.0f; 
 {
                ServerSocket listener = null;
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    
                    listener = new ServerSocket(39543);
                    socket = listener.accept();
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    
                    String stringNumber = readerBuffered.readLine();
                    if (stringNumber != null) {
                        try {
                            data = Float.parseFloat(stringNumber.trim());
                        }
                        catch (NumberFormatException exceptNumberFormat) {
                            IO.logger.log(Level.WARNING, "Number format exception parsing data from string", exceptNumberFormat);
                        }
                    }
                }
                catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
                finally {
                    
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }
                    }
                    catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }
                    }
                    catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    
                    try {
                        if (socket != null) {
                            socket.close();
                        }
                    }
                    catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                    try {
                        if (listener != null) {
                            listener.close();
                        }
                    }
                    catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                    }
                }
            }
        }
        else {
            
            data = 0.0f;
        }

        if (privateFalse) {
            
            IO.writeLine("Benign, fixed string");
        }
        else {

            
            if (Math.abs(data) > 0.000001) {
                int result = (int)(100.0 % data);
                IO.writeLine(result);
            }
            else {
                IO.writeLine("This would result in a modulo by zero");
            }

        }
    }