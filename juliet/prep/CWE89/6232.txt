
    private void goodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = ""; 
 {
                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
                while (tokenizer.hasMoreTokens()) {
                    String token = tokenizer.nextToken(); 
                    if(token.startsWith("id=")) {
                        data = token.substring(3); 
                        break; 
                    }
                }
            }
        }
        else {
            
            data = null;
        }

        if (IO.staticReturnsFalse()) {
            
            IO.writeLine("Benign, fixed string");
        }
        else {

            Connection dbConnection = null;
            PreparedStatement sqlStatement = null;

            try {
                
                dbConnection = IO.getDBConnection();
                sqlStatement = dbConnection.prepareStatement("insert into users (status) values ('updated') where name=?");
                sqlStatement.setString(1, data);

                Boolean result = sqlStatement.execute();

                if (result) {
                    IO.writeLine("Name, " + data + ", updated successfully");
                }
                else {
                    IO.writeLine("Unable to update records for user: " + data);
                }
            }
            catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
            finally {
                try {
                    if (sqlStatement != null) {
                        sqlStatement.close();
                    }
                }
                catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                }

                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }
                }
                catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }
            }

        }
    }