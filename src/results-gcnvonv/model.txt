from torch.nn import Linear
import torch.nn.functional as F
from torch_geometric.nn import GCNConv
from torch_geometric.nn import global_mean_pool
import torch

class GCN(torch.nn.Module):
    def __init__(self, hidden_channels):
        super(GCN, self).__init__()
        self.conv1 = GCNConv(50, hidden_channels)
        self.conv2 = GCNConv(hidden_channels, hidden_channels)
        self.conv3 = GCNConv(hidden_channels, hidden_channels)
        self.lin = Linear(hidden_channels, 2)

    def forward(self, x, edge_index, batch):
        # 1. Obtain node embeddings 
        x = self.conv1(x, edge_index)
        x = x.relu()
        x = self.conv2(x, edge_index)
        x = x.relu()
        x = self.conv3(x, edge_index)

        # 2. Readout layer
        x = global_mean_pool(x, batch)  # [batch_size, hidden_channels]

        # 3. Apply a final classifier
        x = F.dropout(x, p=0.1, training=self.training)
        x = self.lin(x)
        
        return x

def learn(train, test, cwe):
    model = GCN(hidden_channels=64)
    optimizer = torch.optim.Adam(model.parameters(), lr=0.01)
    criterion = torch.nn.CrossEntropyLoss()
    epochs, losses, accs = [], [], []
    for epoch in range(40):
        for data in train:
            optimizer.zero_grad()  
            out = model(data.x, data.edge_index, data.batch)  
            loss = criterion(out, data.y) 
            loss.backward()  
            optimizer.step()
        correct, total = 0, 0
        for quiz in test:
            out = model(quiz.x, quiz.edge_index, quiz.batch) 
            pred = out.argmax(dim=1)
            for guess, answer in zip(pred.tolist(), quiz.y.tolist()):
                if guess == answer:
                    correct+=1
                    total+=1
                else:
                    total+=1
        epochs.append(epoch)
        losses.append(loss)
        accs.append(correct/total)
    plt.plot(epochs, losses)
    plt.savefig('pngs/'+str(cwe)+'-loss.png')
    plt.clf()
    plt.plot(epochs, accs)
    plt.savefig('pngs/'+str(cwe)+'-acc.png')
    plt.clf()