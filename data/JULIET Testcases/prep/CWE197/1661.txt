
    public void bad() throws Throwable {
        short data;

        data = Short.MIN_VALUE; 

 {
            Properties properties = new Properties();
            FileInputStream streamFileInput = null;

            try {
                streamFileInput = new FileInputStream("../common/config.properties");
                properties.load(streamFileInput);

                
                String stringNumber = properties.getProperty("data");
                if (stringNumber != null) {
                    try {
                        data = Short.parseShort(stringNumber.trim());
                    }
                    catch(NumberFormatException exceptNumberFormat) {
                        IO.logger.log(Level.WARNING, "Number format exception parsing data from string", exceptNumberFormat);
                    }
                }
            }
            catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
            finally {
                
                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }
                }
                catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }
            }
        }

        Vector<Short> dataVector = new Vector<Short>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE197_Numeric_Truncation_Error__short_PropertiesFile_72b()).badSink(dataVector  );
    }