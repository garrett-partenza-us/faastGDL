
    public void goodB2GSink(byte[] countSerialized ) throws Throwable {
        
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;

        try {
            streamByteArrayInput = new ByteArrayInputStream(countSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            int count = (Integer)streamObjectInput.readObject();

            
            if (count > 0 && count <= 20) {
                File file = new File("goodSink.txt");
                FileOutputStream streamFileOutput = new FileOutputStream(file);
                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, "UTF-8");
                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);
                int i;
                for (i = 0; i < count; i++) {
                    try {
                        writerBuffered.write("Hello");
                    }
                    catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error with stream writing", exceptIO);
                    }
                }
                
                try {
                    if (writerBuffered != null) {
                        writerBuffered.close();
                    }
                }
                catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedWriter", exceptIO);
                }
                try {
                    if (writerOutputStream != null) {
                        writerOutputStream.close();
                    }
                }
                catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing OutputStreamWriter", exceptIO);
                }
                try {
                    if (streamFileOutput != null) {
                        streamFileOutput.close();
                    }
                }
                catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileOutputStream", exceptIO);
                }
            }

        }
        catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
        catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
        finally {
            
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }
            }
            catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }
            }
            catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }
        }
    }