
    private void goodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        int count;

        count = Integer.MIN_VALUE; 

 {
            String stringNumber = request.getParameter("name");

            try {
                count = Integer.parseInt(stringNumber.trim());
            }
            catch(NumberFormatException exceptNumberFormat) {
                IO.logger.log(Level.WARNING, "Number format exception reading count from parameter 'name'", exceptNumberFormat);
            }
        }

        
        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;

        try {
            streamByteArrayOutput = new ByteArrayOutputStream() ;
            outputObject = new ObjectOutputStream(streamByteArrayOutput) ;
            outputObject.writeObject(count);
            byte[] countSerialized = streamByteArrayOutput.toByteArray();
            (new CWE400_Resource_Exhaustion__getParameter_Servlet_write_75b()).goodB2GSink(countSerialized , request, response );
        }
        catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
        finally {
            
            try {
                if (outputObject != null) {
                    outputObject.close();
                }
            }
            catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }
            }
            catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }
        }
    }