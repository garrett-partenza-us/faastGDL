
    private void goodB2G1() throws Throwable {
        int count;
        if (IO.staticTrue) {
            count = Integer.MIN_VALUE; {
                ServerSocket listener = null;
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                
                try {
                    listener = new ServerSocket(39543);
                    socket = listener.accept();
                    
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    
                    String stringNumber = readerBuffered.readLine();
                    if (stringNumber != null) {
                        try {
                            count = Integer.parseInt(stringNumber.trim());
                        }
                        catch(NumberFormatException exceptNumberFormat) {
                            IO.logger.log(Level.WARNING, "Number format exception parsing count from string", exceptNumberFormat);
                        }
                    }
                }
                catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
                finally {
                    
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }
                    }
                    catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }
                    }
                    catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    
                    try {
                        if (socket != null) {
                            socket.close();
                        }
                    }
                    catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                    try {
                        if (listener != null) {
                            listener.close();
                        }
                    }
                    catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                    }
                }
            }
        }
        else {
            
            count = 0;
        }

        if (IO.staticFalse) {
            
            IO.writeLine("Benign, fixed string");
        }
        else {

            int i = 0;

            
            if (count > 0 && count <= 20) {
                for (i = 0; i < count; i++) {
                    IO.writeLine("Hello");
                }
            }

        }
    }