
    private void goodB2G2() throws Throwable {
        int data;
        if (privateTrue) {
            data = Integer.MIN_VALUE; {
                File file = new File("C:\\data.txt");
                FileInputStream streamFileInput = null;
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    
                    streamFileInput = new FileInputStream(file);
                    readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    
                    
                    String stringNumber = readerBuffered.readLine();
                    if (stringNumber != null) {
                        try {
                            data = Integer.parseInt(stringNumber.trim());
                        }
                        catch(NumberFormatException exceptNumberFormat) {
                            IO.logger.log(Level.WARNING, "Number format exception parsing data from string", exceptNumberFormat);
                        }
                    }
                }
                catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
                finally {
                    
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }
                    }
                    catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }
                    }
                    catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }
                    }
                    catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }
                }
            }
        }
        else {
            
            data = 0;
        }

        if (privateTrue) {
            
            int array[] = { 0, 1, 2, 3, 4 };
            
            if (data >= 0 && data < array.length) {
                array[data] = 42;
            }
            else {
                IO.writeLine("Array index out of bounds");
            }
        }
    }