
    private void goodB2G() throws Throwable {
        String data;

        FileInputStream streamFileInput = null;
        String propertiesFileName = "./CWE690_NULL_Deref_From_Return__Helper.properties";
        try {
            streamFileInput = new FileInputStream(propertiesFileName);
            Properties properties = new Properties();
            properties.load(streamFileInput);

            
            data = properties.getProperty("CWE690");
        }
        catch (IOException exceptIO) {
            IO.writeLine("Could not open properties file: " + propertiesFileName);
            data = ""; 
        }
        finally {
            try {
                if (streamFileInput != null) {
                    streamFileInput.close();
                }
            }
            catch (IOException e) {
                IO.logger.log(Level.WARNING, "Error closing FileInputStream", e);
            }
        }

        
        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;

        try {
            streamByteArrayOutput = new ByteArrayOutputStream() ;
            outputObject = new ObjectOutputStream(streamByteArrayOutput) ;
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE690_NULL_Deref_From_Return__Properties_getProperty_trim_75b()).goodB2GSink(dataSerialized  );
        }
        catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
        finally {
            
            try {
                if (outputObject != null) {
                    outputObject.close();
                }
            }
            catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }
            }
            catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }
        }
    }