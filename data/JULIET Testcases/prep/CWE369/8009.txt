
    public void bad() throws Throwable {
        float data;

        switch (6) {
        case 6:
            data = -1.0f; 
            
            Properties properties = new Properties();
            FileInputStream streamFileInput = null;
            try {
                streamFileInput = new FileInputStream("../common/config.properties");
                properties.load(streamFileInput);
                
                String stringNumber = properties.getProperty("data");
                if (stringNumber != null) {
                    try {
                        data = Float.parseFloat(stringNumber.trim());
                    }
                    catch (NumberFormatException exceptNumberFormat) {
                        IO.logger.log(Level.WARNING, "Number format exception parsing data from string", exceptNumberFormat);
                    }
                }
            }
            catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
            finally {
                
                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }
                }
                catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }
            }
            break;
        default:
            
            data = 0.0f;
            break;
        }

        switch (7) {
        case 7:
            
            int result = (int)(100.0 / data);
            IO.writeLine(result);
            break;
        default:
            
            IO.writeLine("Benign, fixed string");
            break;
        }
    }