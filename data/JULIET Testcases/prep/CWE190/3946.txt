
    private void goodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        int data;

        data = Integer.MIN_VALUE; 

 {
            Cookie cookieSources[] = request.getCookies();
            if (cookieSources != null) {
                
                String stringNumber = cookieSources[0].getValue();
                try {
                    data = Integer.parseInt(stringNumber.trim());
                }
                catch(NumberFormatException exceptNumberFormat) {
                    IO.logger.log(Level.WARNING, "Number format exception reading data from cookie", exceptNumberFormat);
                }
            }
        }

        for (int k = 0; k < 1; k++) {
            
            
            if ((data != Integer.MIN_VALUE) && (data != Long.MIN_VALUE) && (Math.abs(data) <= (long)Math.sqrt(Integer.MAX_VALUE))) {
                int result = (int)(data * data);
                IO.writeLine("result: " + result);
            }
            else {
                IO.writeLine("data value is too large to perform squaring.");
            }
        }
    }