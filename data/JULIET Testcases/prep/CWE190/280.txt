
    public void goodB2GSink(byte[] dataSerialized ) throws Throwable {
        
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;

        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            short data = (Short)streamObjectInput.readObject();

            if(data > 0) {
                
                if (data < (Short.MAX_VALUE/2)) {
                    short result = (short)(data * 2);
                    IO.writeLine("result: " + result);
                }
                else {
                    IO.writeLine("data value is too large to perform multiplication.");
                }
            }

        }
        catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
        catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
        finally {
            
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }
            }
            catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }
            }
            catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }
        }
    }