
    public void bad() throws Throwable {
        String passwordCopy; {
            String password;

            password = ""; 

 {
                ServerSocket listener = null;
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;

                try {
                    
                    listener = new ServerSocket(39543);
                    socket = listener.accept();

                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);

                    
                    password = readerBuffered.readLine();
                }
                catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
                finally {
                    
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }
                    }
                    catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }
                    }
                    catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    
                    try {
                        if (socket != null) {
                            socket.close();
                        }
                    }
                    catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                    try {
                        if (listener != null) {
                            listener.close();
                        }
                    }
                    catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                    }
                }
            }

            passwordCopy = password;
        } {
            String password = passwordCopy;

            if (password != null) {
                KerberosPrincipal principal = new KerberosPrincipal("test");
                
                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);
                IO.writeLine(key.toString());
            }

        }
    }