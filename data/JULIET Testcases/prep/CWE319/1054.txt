
    public void bad() throws Throwable {
        String password;
        if (PRIVATE_STATIC_FINAL_FIVE==5) {
            password = ""; 
 {
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    
                    socket = new Socket("host.example.org", 39544);
                    
                    
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    password = readerBuffered.readLine();
                }
                catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
                finally {
                    
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }
                    }
                    catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }
                    }
                    catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    
                    try {
                        if (socket != null) {
                            socket.close();
                        }
                    }
                    catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }
                }
            }
        }
        else {
            
            password = null;
        }

        if (PRIVATE_STATIC_FINAL_FIVE==5) {
            if (password != null) {
                KerberosPrincipal principal = new KerberosPrincipal("test");
                
                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);
                IO.writeLine(key.toString());
            }
        }
    }